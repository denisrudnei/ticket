#import Knowledge from "./schemas/knowledgeSchema.graphql"
#import Ticket from "./schemas/ticketSchema.graphql"
#import Log from "./schemas/logSchema.graphql"
#import Category from "./schemas/categorySchema.graphql"
#import Status from "./schemas/statusSchema.graphql"
#import Field from "./schemas/fieldSchema.graphql"
#import Group from "./schemas/groupSchema.graphql"
#import Analyst from "./schemas/analystSchema.graphql"
#import Address from "./schemas/addressSchema.graphql"
#import Comment from "./schemas/commentSchema.graphql"
#import Sound from "./schemas/soundSchema.graphql"
#import File from "./schemas/fileSchema.graphql"
#import Role from './schemas/roleSchema.graphql'

type Query {
  TicketById(_id: ID): Ticket,
  Tickets(descending: Int = -1, sortBy: String = "created", page: Int = 1, limit: Int = 10): TicketPagination,
  Status: [Status],
  FindStatus(example: String): [Status]
  Group: [Group]
  Category: [Category]
  GetSubs(categoryId: ID): [Category]
  Analyst: [Analyst]
  SearchTicket(page: Int = 1, limit: Int = 10, descending: Int = -1, sortBy: String = "created", attributes: TicketAttributes): TicketPagination
  Knowledge: [Knowledge]
  KnowledgeByGroup(groupName: String!): [Knowledge]
  KnowledgeById(_id: ID!): Knowledge
  Role: [Role]
}

type Mutation {
  Login(email: String!, password: String!): Analyst
  CreateTicket(actualUser: ID!, affectedUser: ID!, resume: String!, content: String!, group: ID!, status: ID!, category: ID!): Ticket
  TransferTicket(ticketId: ID!, groupId: ID!): Ticket
  ChangeStatus(ticketId: ID!, statusId: ID!): Ticket
}

type Subscription {
  TransferToGroup: Ticket!,
  ChangeStatus: Ticket!,
  EditTicket: Ticket!
}

scalar Datetime